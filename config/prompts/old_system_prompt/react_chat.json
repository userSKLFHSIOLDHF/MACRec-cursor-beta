{
    "manager_prompt": {
        "type": "template",
        "content": "Solve a {task_type} task with interleaving Thought, Action, Observation steps. Thought can reason about the current situation. Action can be 2 types:\n(1) Search[requirements], which will ask another agent (called Searcher) to help search given the requirements.\n(2) Finish[response], which finishes the task and returns the response to the user.\nYou can take at most {max_step} steps. You will be given a task requirements generated by Task Interpreter (another agent) and the conversation history.\n{examples}\nTask Requirements: {task_prompt}\n\nConversation History:{history}\n{scratchpad}"
    },
    "manager_prompt_json": {
        "type": "template",
        "content": "Solve a {task_type} task with interleaving Thought, Action, Observation steps. Thought can reason about the current situation. Action can be 2 types in JSON format:\n(1) {{\"type\": \"Search\", \"content\": requirements}}, which will ask another agent (called Searcher) to help search given the requirements.\n(2) {{\"type\": \"Finish\", \"content\": response}}, which finishes the task and returns the response to the user.\nYou can take at most {max_step} steps. You will be given a task requirements generated by Task Interpreter (another agent) and the conversation history.\n{examples}\nTask Requirements: {task_prompt}\n\nConversation History:{history}\n{scratchpad}"
    },
    "hint": {
        "type": "raw",
        "content": "This is the final step. You should use Finish Action to finish the task."
    },
    "interpreter_prompt": {
        "type": "template",
        "content": "I want you to act as an prompt interpreter. I will give you the conversation history between the system and the user, and you should give a consise and clear prompt for the system to generate the appropriate response. You can use 2 type of commands to do this:\n(1) Summarize[], which will give you a summary of the user's input by some text summarization tools.\n(2) Finish[prompt], which returns the prompt you generated and finishes the task.\nValid command examples:\n{examples}\n(END OF EXAMPLES)\n\nThe last 100 words of the user's input are:\n{input}\n\n{history}\n\nCommand: "
    },
    "interpreter_prompt_json": {
        "type": "template",
        "content": "I want you to act as an prompt interpreter. I will give you the conversation history between the system and the user, and you should give a consise and clear prompt for the system to generate the appropriate response. You can use 2 type of commands in JSON format to do this:\n(1) {{\"type\": \"Summarize\", \"content\": \"\"}}, which will give you a summary of the user's input by some text summarization tools.\n(2) {{\"type\": \"Finish\", \"content\": prompt}}, which returns the prompt you generated and finishes the task.\nValid command examples:\n{examples}\n(END OF EXAMPLES)\n\nThe last 100 words of the conversation history:\n{input}\n\n{history}\n\nCommand: "
    },
    "interpreter_examples": {
        "type": "raw",
        "content": "Summarize[]\nFinish[Please tell me the weather in New York City.]"
    },
    "interpreter_examples_json": {
        "type": "raw",
        "content": "{\"type\": \"Summarize\", \"content\": \"\"}\n{\"type\": \"Finish\", \"content\": \"Please tell me the weather in New York City.\"}"
    },
    "searcher_prompt": {
        "type": "template",
        "content": "Help to search the wikipedia with the following requirements and give a result. You can use 3 type of commands:\n(1) Search[query], which searches the query on Wikipedia and returns the most {k} relevant documents' titles (the title can be used as the entity in the second command).\n(2) Lookup[entity, keyword], which returns the next sentence containing keyword in the passage with the entity.\n(3) Finish[result], which returns the result and finishes the task.\nYou may take as many steps as necessary.\nValid commands examples:\n{examples}\n(END OF EXAMPLES)\n\nRequirements: {requirements}\n\n{history}\n\nCommand: "
    },
    "searcher_prompt_json": {
        "type": "template",
        "content": "Help to search the wikipedia with the following requirements and give a result. You can use 3 type of commands in JSON format:\n(1) {{\"type\": \"Search\", \"content\": query}}, which searches the query on Wikipedia and returns the most {k} relevant documents' titles (the title can be used as the entity in the second command).\n(2) {{\"type\": \"Lookup\", \"content\": [entity, keyword]}}, which returns the next sentence containing keyword in the passage with the entity.\n(3) {{\"type\": \"Finish\", \"content\": result}}, which returns the result and finishes the task.\nYou may take as many steps as necessary.\nValid commands examples:\n{examples}\n(END OF EXAMPLES)\n\nRequirements: {requirements}\n\n{history}\n\nCommand: "
    },
    "searcher_examples": {
        "type": "raw",
        "content": "Search[Bumble and Bumble]\nLookup[Bumble and Bumble, Hair Care]\nFinish[A good hair care product]"
    },
    "searcher_examples_json": {
        "type": "raw",
        "content": "{\"type\": \"Search\", \"content\": \"Bumble and Bumble\"}\n{\"type\": \"Lookup\", \"content\": [\"Bumble and Bumble\", \"Hair Care\"]}\n{\"type\": \"Finish\", \"content\": \"A good hair care product\"}"
    }
}